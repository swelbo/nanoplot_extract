data
tre <- read.newick(file = "~/Documents/data/Bd/kihansi/Phylogeny files/RAxML_bipartitions.kihansi.2019.panel.raxml.563326.pbs.r3i2n3")
library("ape")
library("Biostrings")
library("ggplot2")
library("ggtree")
install.packages("ape")
library("ape")
library("Biostrings")
library("ggplot2")
library("ggtree")
tre <- read.newick(file = "~/Documents/data/Bd/kihansi/Phylogeny files/RAxML_bipartitions.kihansi.2019.panel.raxml.563326.pbs.r3i2n3")
install.packages("msa")
# l
msaConvert <- function(x, type=c("seqinr::alignment",
"bios2mds::align",
"ape::AAbin",
"ape::DNAbin",
"phangorn::phyDat",
"bio3d::fasta"))
{
type <- match.arg(type)
if (!is(x, "MultipleAlignment"))
stop("x must be a 'MultipleAlignment' object")
xn <- as.character(unmasked(x))
if (type == "seqinr::alignment")
{
out <- list(nb=length(xn),
nam=names(xn),
seq=unname(xn),
com=NA)
class(out) <- "alignment"
}
else if (type == "bios2mds::align")
{
out <- .Call("SplitCharVector2List", xn)
names(out) <- names(xn)
class(out) <- "align"
}
else if (type == "ape::AAbin")
{
if (!is(x, "AAMultipleAlignment"))
stop("conversion to 'ape::AAbin' only supported for ",
"amino acid sequences")
out <- .Call("SplitCharVector2Matrix", xn, "X")
rownames(out) <- names(xn)
class(out) <- "AAbin"
}
else if (type == "ape::DNAbin")
{
if (!is(x, "DNAMultipleAlignment"))
stop("conversion to 'ape::DNAbin' only supported for ",
"DNA sequences")
out <- .Call("SplitCharVector2Matrix", tolower(xn), "n")
rownames(out) <- names(xn)
class(out) <- "DNAbin"
}
else if (type == "phangorn::phyDat")
{
if (!is(x, "DNAMultipleAlignment"))
stop("conversion to 'phangorn::phyDat' only supported for ",
"DNA sequences")
if (requireNamespace("phangorn", quietly=TRUE))
out <- phangorn::as.phyDat(x)
else
stop("conversion to 'phyDat' requires package 'phangorn'")
}
else if (type == "bio3d::fasta")
{
out <- list(id=names(xn),
ali=.Call("SplitCharVector2Matrix", xn, "-"),
call=x@call)
rownames(out$ali) <- out$id
class(out) <- "fasta"
}
out
}
msaConvert(x = "Documents/data/bd/genomics/mauve/sorted/aligned.xmaf", type = "bio3d::fasta" )
# l
install.packages("â€˜genoPlotRâ€™")
# l
install.packages("genoPlotR")
data(three_genes)
library(genoPlotR)
data(three_genes)
data(three_genes)
install.packages("genoPlotR")
library(genoPlotR)
data(three_genes)
x <- data(three_genes)
x
data(three_genes)
comparisons
data(mauve_bbone)
bbone
read_mauve_backbone(file = "Documents/data/bd/genomics/mauve/sorted/aligned.backbone")
x <- read_mauve_backbone(file = "Documents/data/bd/genomics/mauve/sorted/aligned.backbone")
x <- read_mauve_backbone(file = "Documents/data/bd/genomics/mauve/sorted/aligned.backbone", ref = 1)
x
x$dna_segs
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons)
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons, scale_cex = 4)
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons, scale_cex = 2)
plot_gene_map(dna_segs=x$dna_segs)
library(ape)
read.tree(file = "Documents/data/bd/genomics/mauve/sorted/aligned.guide_tree")
tre <- read.tree(file = "Documents/data/bd/genomics/mauve/sorted/aligned.guide_tree")
phylog.extract(tre)
newick2phylog(x.tre = tre)
newick2phylog(x.tre = tre)
class(tre)
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons, tree = tre)
tree.nw <- scan(tre, what="character")
tree.nw <- scan("tre", what="character")
tre
as.phylo(tre)
newick2phylog(tre)
library(phytools)
install.packages("phytools")
library
library(phylotools)
library(phytools)
read.newick(file = "Documents/data/bd/genomics/mauve/sorted/aligned.guide_tree")
newick <- read.newick(file = "Documents/data/bd/genomics/mauve/sorted/aligned.guide_tree")
tre <- newick2phylog(newick)
tre <- newick2phylog(newick)
tre <- newick2phylog(x.tre = newick)
newick
w <- "((((,,),,(,)),),(,));"
newick2phylog(tre)
newick2phylog(x.tre = tre, add.tools = TRUE)
newick2phylog()
w
newick2phylog(w)
w <- "(((seq2:0.0907897,seq1:0.103214):0.0571814,seq5:0.0829627):0.0414814,(seq4:0.170195,seq3:0.168539):0.00709838);"
newick2phylog(w)
x <- newick2phylog(w)
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons, tree = x)
tre <- newick2phylog(w)
x <- read_mauve_backbone(file = "Documents/data/bd/genomics/mauve/sorted/aligned.backbone", ref = 1)
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons, tree = x)
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons, tree = tre)
tre <- newick2phylog(w)
x$dna_segs
dna_segs
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons, tree = tre, dna_seg_labels = c("s1", "s2", "s3", "s4") )
dna_seg_labels = c("s1", "s2", "s3", "s4")
length(dna_seg_labels)
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons, tree = tre, dna_seg_labels = c("s1", "s2", "s3", "s4"))
dna_seg()
dna_seg()
dna_seg
dna_segs
x$dna_segs
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons,
tree = tre, dna_seg_labels = c("s1", "s2", "s3", "s4", "S5"))
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons,
tree = tre, dna_seg_labels = c("1", "2", "3", "4", "5"))
plot.phylo(x = tre)
plot.phylo(x = w)
plotTree(x = w)
plotTree(tree = w)
plotTree(tree = x)
plotTree(tree = newick)
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons,
tree = tre, dna_seg_labels = c("seq1", "seq2", "seq3", "seq4", "seq5"))
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons,
tree = tre, dna_seg_labels = c("seq1", "seq2", "seq3", "seq4", "seq5"))
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons,
tree = tre, dna_seg_labels = c("seq2", "seq1", "seq5", "seq4", "seq3"))
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons,
tree = tre, dna_seg_labels = c("seq2", "seq1", "seq5", "seq4", "seq3"), tree_scale = TRUE)
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons,
tree = tre, dna_seg_labels = c("seq2", "seq1", "seq5", "seq4", "seq3"), )
x <- read_mauve_backbone(file = "Documents/data/bd/genomics/mauve/sorted/aligned.backbone", ref = 2)
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons,
tree = tre, dna_seg_labels = c("seq2", "seq1", "seq5", "seq4", "seq3"), )
x <- read_mauve_backbone(file = "Documents/data/bd/genomics/mauve/sorted/aligned.backbone", ref = 4)
x <- read_mauve_backbone(file = "Documents/data/bd/genomics/mauve/sorted/aligned.backbone", ref = 4)
x$dna_segs
newick <- read.newick(file = "Documents/data/bd/genomics/mauve/sorted/aligned.guide_tree", )
tre <- newick2phylog(x.tre = newick)
w <- "(((IA042:0.0907897,JEL423:0.103214):0.0571814,KB45:0.0829627):0.0414814,(KRBOOR331:0.170195,TF5A1:0.168539):0.00709838);"
tre <- newick2phylog(w)
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons,
tree = tre, dna_seg_labels = c("IA042", "JEL423", "KB45", "KRBOOR331", "TF5A1"), )
x <- read_mauve_backbone(file = "Documents/data/bd/genomics/mauve/sorted/aligned.backbone", ref = 4)
x$dna_segs
newick <- read.newick(file = "Documents/data/bd/genomics/mauve/sorted/aligned.guide_tree", )
tre <- newick2phylog(x.tre = newick)
w <- "(((seq2:0.0907897,seq1:0.103214):0.0571814,seq5:0.0829627):0.0414814,(seq4:0.170195,seq3:0.168539):0.00709838);"
tre <- newick2phylog(w)
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons,
tree = tre, dna_seg_labels = c("seq2", "seq1", "seq5", "seq4", "seq3"), )
x <- read_mauve_backbone(file = "Documents/data/bd/genomics/mauve/sorted/aligned.backbone", ref = 4)
newick_tre <- "(((seq2:0.0907897,seq1:0.103214):0.0571814,seq5:0.0829627):0.0414814,(seq4:0.170195,seq3:0.168539):0.00709838);"
tre <- newick2phylog(newick_tre)
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons,
tree = tre, dna_seg_labels = c("seq2", "seq1", "seq5", "seq4", "seq3"), tree_width = 30)
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons,
tree = tre, dna_seg_labels = c("seq2", "seq1", "seq5", "seq4", "seq3"), tree_width = 21)
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons,
tree = tre, dna_seg_labels = c("seq2", "seq1", "seq5", "seq4", "seq3"), tree_width = 2)
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons,
tree = tre, dna_seg_labels = c("seq2", "seq1", "seq5", "seq4", "seq3"), tree_width = 4)
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons,
tree = tre, dna_seg_labels = c("seq2", "seq1", "seq5", "seq4", "seq3"), seg_plot_height = 5)
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons,
tree = tre, dna_seg_labels = c("seq2", "seq1", "seq5", "seq4", "seq3"), seg_plot_height = 10)
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons,
tree = tre, dna_seg_labels = c("seq2", "seq1", "seq5", "seq4", "seq3"), override_color_schemes = TRUE)
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons,
tree = tre, dna_seg_labels = c("seq2", "seq1", "seq5", "seq4", "seq3"),
override_color_schemes = TRUE, global_color_scheme = c("dark"))
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons,
tree = tre, dna_seg_labels = c("seq2", "seq1", "seq5", "seq4", "seq3"),
override_color_schemes = TRUE, global_color_scheme = c("red", "red", "red", "red"))
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons,
tree = tre, dna_seg_labels = c("seq2", "seq1", "seq5", "seq4", "seq3"),
override_color_schemes = TRUE, global_color_scheme = c("1", "2", "3", "4"))
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons,
tree = tre, dna_seg_labels = c("seq2", "seq1", "seq5", "seq4", "seq3"),
override_color_schemes = TRUE, global_color_scheme = c("red", "increasing", "red", "red"))
x$dna_segs
View(dna_segs)
x <- read_mauve_backbone(file = "Documents/data/bd/genomics/mauve/sorted/aligned.backbone", ref = 4, common_blocks_only = TRUE)
newick_tre <- "(((seq2:0.0907897,seq1:0.103214):0.0571814,seq5:0.0829627):0.0414814,(seq4:0.170195,seq3:0.168539):0.00709838);"
tre <- newick2phylog(newick_tre)
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons,
tree = tre, dna_seg_labels = c("seq2", "seq1", "seq5", "seq4", "seq3"),
override_color_schemes = TRUE, global_color_scheme = c("red", "increasing", "red", "red"))
x <- read_mauve_backbone(file = "Documents/data/bd/genomics/mauve/sorted/aligned.backbone", ref = 4, common_blocks_only = TRUE)
newick_tre <- "(((seq2:0.0907897,seq1:0.103214):0.0571814,seq5:0.0829627):0.0414814,(seq4:0.170195,seq3:0.168539):0.00709838);"
tre <- newick2phylog(newick_tre)
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons,
tree = tre, dna_seg_labels = c("seq2", "seq1", "seq5", "seq4", "seq3"))
plot_gene_map(dna_segs = x$dna_segs, comparisons = x$comparisons,
tree = tre, dna_seg_labels = c("seq2", "seq1", "seq5", "seq4", "seq3"), annotation_height = 1.3)
library("raster")
library("sf")
library("rgeos")
library("rgdal")
library("lwgeom")
library("viridis")
library("leaflet")
library("ggplot2")
library("rnaturalearthdata")
library("ggrepel")
library("rnaturalearth")
world<-ne_countries(scale="medium", returnclass = "sf")
class(world)
world_points<-st_centroid(world)#Make sure you run these two lines because otherwise aes() freaks out
world_points<-cbind(world, st_coordinates(st_centroid(world$geometry)))
points<-data.frame(
long=c(39.222695,35.851339, 35.750488),
lat=c(-6.790026,-8.574936, -6.163727),
stringsAsFactors=FALSE
)
long=c(39.222695,35.851339, 35.750488)
lat=c(-6.790026,-8.574936, -6.163727)
labels<-c("Dar es Salaam", "Kihansi Gorge", "Dodoma")
points
ggplot(data=world)+#ggplot() initiates the graph using what data, geom_sf adds geometry stored in an sf object.
geom_sf(color="black", fill="#F4F5EE")+
geom_point(data=points, aes(x=long, y=lat),colour="black", size = 2)+
geom_label_repel(data=points,aes(x=long, y=lat, label=labels),nudge_x = 2, size=3.5, color="black")+
annotate(geom="text", x=34, y=-4,  label="Tanzania", fontface = "bold", color="grey22", size=7)+
coord_sf(xlim=c(27,46), ylim = c(-14,0), expand = FALSE)+
theme(panel.grid.major = element_line(color=gray(0.5), linetype = "dashed", size=0.5), panel.background=element_rect(fill = "aliceblue"))
#building the query
q <- getbb(place_name = "Kihansi") %>%
opq()
str(q)
mad_map <- get_map(getbb("Kihansi"), )
ggmap(mad_map)
data <- read.csv(file = "Documents/data/bd/kihansi/kihansi_bdpositives.csv")
library(leaflet)
m = leaflet(data = data) %>% addTiles()
m = m %>% setView(35.851002, -8.568486, zoom = 12)
m = m %>% addCircleMarkers(~long, ~lat, color = "red",
stroke = FALSE, fillOpacity = 0.5 , radius = 5)
m
read.vcfR(file = "Documents/data/bd/kihansi/Beast/all_cape_isolates/kihansi_cape_only_phylo.filtered.BIGBEAST.snps.vcf")
x <- read.vcfR(file = "Documents/data/bd/kihansi/Beast/all_cape_isolates/kihansi_cape_only_phylo.filtered.BIGBEAST.snps.vcf")
x@gt
x@fix
x@meta
plot(x)
plot(x@gt)
plot(x)
chrom <- create.chromR(name='Supercontig', vcf=x, seq=dna)
chrom <- create.chromR(vcf=x, seq=dna)
chrom <- create.chromR(vcf=x)
chrom
chrom <- create.chromR(name='AATT01000', vcf=x, seq=dna)
chrom <- create.chromR(name='AATT01000', vcf=x)
shapefile <- readOGR(dsn="/Map shapefiles", layer="Local_Administrative_Units_Level_1_December_2015_Full_Clipped_Boundaries_in_England_and_Wales")
library(maps)
library(mapdata)
library(maptools)
library(rgdal)
library(ggmap)
library(ggplot2)
library(rgeos)
library(broom)
library(plyr)
shapefile <- readOGR(dsn="/Map shapefiles", layer="Local_Administrative_Units_Level_1_December_2015_Full_Clipped_Boundaries_in_England_and_Wales")
shapefile <- readOGR(shapefile = 'Downloads/Local_Administrative_Units_Level_1_(December_2015)_Boundaries/', layer="Local_Administrative_Units_Level_1_December_2015_Full_Clipped_Boundaries_in_England_and_Wales")
shapefile <- readOGR(shapefile = 'Downloads/Local_Administrative_Units_Level_1_(December_2015)_Boundaries/Local_Administrative_Units_Level_1_(December_2015)_Boundaries.shp', layer="Local_Administrative_Units_Level_1_December_2015_Full_Clipped_Boundaries_in_England_and_Wales")
shapefile <- readOGR(shapefile = 'Downloads/Local_Administrative_Units_Level_1_(December_2015)_Boundaries/Local_Administrative_Units_Level_1_(December_2015)_Boundaries.shp')
shapefile <- readOGR(shapefile = 'Downloads/Local_Administrative_Units_Level_1_(December_2015)_Boundaries/Local_Administrative_Units_Level_1_(December_2015)_Boundaries.shp')
shapefile <- readOGR(dsn = 'Downloads/Local_Administrative_Units_Level_1_(December_2015)_Boundaries/Local_Administrative_Units_Level_1_(December_2015)_Boundaries.shp')
mapdata <- tidy(shapefile, region="lau115nm")
head(mapdata)
gg <- ggplot() + geom_polygon(data = mapdata, aes(x = long, y = lat, group = group), color = "#FFFFFF", size = 0.25)
gg <- gg + coord_fixed(1) #This gives the map a nice 1:1 aspect ratio to prevent the map from appearing squashed
print(gg)
gg
gg <- ggplot() + geom_polygon(data = mapdata, aes(x = long, y = lat, group = group), color = "#E5F6DF", size = 0.25)
gg <- gg + coord_fixed(1) #This gives the map a nice 1:1 aspect ratio to prevent the map from appearing squashed
shapefile
shapefile@polygons
shapefile@data
mapdata <- tidy(shapefile, region="lau115cd")
head(mapdata)
gg <- ggplot() + geom_polygon(data = mapdata, aes(x = long, y = lat, group = group), color = "#E5F6DF", size = 0.25)
gg <- gg + coord_fixed(1) #This gives the map a nice 1:1 aspect ratio to prevent the map from appearing squashed
print(gg)
gg <- ggplot() + geom_polygon(data = mapdata, aes(x = long, y = lat, group = group), color = "#FFFFFF", size = 0.25)
gg <- gg + coord_fixed(1) #This gives the map a nice 1:1 aspect ratio to prevent the map from appearing squashed
print(gg)
#Set your API Key
ggmap::register_google(key = "AIzaSyADHxqpDGbhx_fCTyTcz-WZVeRrh1GULHc")
p <- ggmap(get_googlemap(center = c(lon = -122.335167, lat = 47.608013),
zoom = 11, scale = 2,
maptype ='terrain',
color = 'color'))
p <- ggmap(get_googlemap(center = c(lon = -122.335167, lat = 47.608013),
zoom = 11, scale = 2,
maptype ='terrain',
color = 'color'))
p <- ggmap(get_cloudmademap(center = c(lon = -122.335167, lat = 47.608013),
zoom = 11, scale = 2,
maptype ='terrain',
color = 'color'))
p <- ggmap(get_googlemap(center = c(lon = -122.335167, lat = 47.608013),
zoom = 11, scale = 2,
maptype ='terrain',
color = 'color'))
ggmap::register_google(key = "AIzaSyADHxqpDGbhx_fCTyTcz-WZVeRrh1GULHc")
p <- ggmap(get_googlemap(center = c(lon = -122.335167, lat = 47.608013),
zoom = 11, scale = 2,
maptype ='terrain',
color = 'color'))
#Load the library
library("ggmap")
#Load the library
library("ggmap")
#Set your API Key
ggmap::register_google(key = "AIzaSyADHxqpDGbhx_fCTyTcz-WZVeRrh1GULHc")
p <- ggmap(get_googlemap(center = c(lon = -122.335167, lat = 47.608013),
zoom = 11, scale = 2,
maptype ='terrain',
color = 'color'))
p
devtools::install_github("dr-harper/ggmapstyles")
library(ggmapstyles)
basemap <- get_snazzymap("Southampton, UK", mapRef = "https://snazzymaps.com/style/83/muted-blue")
ggmap(basemap)
basemap <- get_snazzymap("Southampton, UK", mapRef = "https://snazzymaps.com/style/93/lost-in-the-desert")
ggmap(basemap)
basemap <- get_snazzymap("London, UK", mapRef = "https://snazzymaps.com/style/93/lost-in-the-desert")
basemap <- get_snazzymap("London, UK", mapRef = "https://snazzymaps.com/style/93/lost-in-the-desert")
ggmap(basemap)
basemap <- get_snazzymap("Southend, UK", mapRef = "https://snazzymaps.com/style/93/lost-in-the-desert")
basemap <- get_snazzymap("Southampton, UK", mapRef = "https://snazzymaps.com/style/93/lost-in-the-desert")
ggmap(basemap)
p <- ggmap(get_googlemap(center = c(lon = -122.335167, lat = 47.608013),
zoom = 8, scale = 2,
maptype ='terrain',
color = 'color'))
p
p <- ggmap(get_googlemap(center = c(lon = -122.335167, lat = 47.608013),
zoom = 5, scale = 2,
maptype ='terrain',
color = 'color'))
p
basemap <- get_snazzymap("London, UK", mapRef = "https://snazzymaps.com/style/93/lost-in-the-desert")
ggmap(basemap)
library('vcfR')
vcf <- read.vcfR("Downloads/test.freal.isolates.vcf.gz)
vcf <- read.vcfR("Downloads/test.freal.isolates.vcf.gz")
vcf <- read.vcfR("Downloads/test.freal.isolates.vcf.gz")
vcf
x <- vcfR2genlight(vcf)
x
library(vcfR)
library(poppr)
library(ape)
library(RColorBrewer)
install.packages("poppr")
vcf <- read.vcfR("Downloads/test.freal.isolates.vcf.gz")
vcf
x <- vcfR2genlight(vcf)
x
pop.data <- read.table("population_data.gbs.txt", sep = "\t", header = TRUE)
library(vcfR)
library(poppr)
library(ape)
library(RColorBrewer)
vcf <- read.vcfR("Downloads/test.freal.isolates.vcf.gz")
vcf
x <- vcfR2genlight(vcf)
x
ploidy(gl.rubi) <- 1
gl.rubi <- vcfR2genlight(x)
gl.rubi <- vcfR2genlight(x)
x <- vcfR2genlight(vcf)
x
gl.rubi <- vcfR2genlight(vcf)
vcf
all(colnames(rubi.VCF@gt)[-1] == pop.data$AccessID)
gl.rubi <- vcfR2genlight(vcf)
ploidy(gl.rubi) <- 1
aboot(gl.rubi)
glPca(gl.rubi, nf = 3)
glPca(gl.rubi)
glPca(gl.rubi)
x
vcf@meta
x <- vcfR2genlight(vcf)
vcf <- read.vcfR("Downloads/test.freal.isolates.vcf.gz")
x <- vcfR2genlight(vcf)
x
x
x.dist <- poppr::bitwise.dist(x)
x
vcf <- read.vcfR("Downloads/test.freal.isolates.vcf.gz")
gen <- vcfR2genlight(vcf)
gen
library(vcfR)
library(poppr)
library(ape)
library(RColorBrewer)
vcf <- read.vcfR("Downloads/test.freal.isolates.vcf.gz")
gen <- vcfR2genlight(vcf)
gen
x.dist <- poppr::bitwise.dist(x)
tree <- aboot(gen, tree = "upgma",
distance = bitwise.dist, sample = 10, showtree = F, cutoff = 50, quiet = T)
tree <- aboot(gen,
distance = bitwise.dist, sample = 10, showtree = F, cutoff = 50, quiet = T)
dist <- bitwise.dist(gen)
dist
gen <- vcfR2genlight(vcf)
gen
dist <- bitwise.dist(gen)
dist
vcf <- read.vcfR("Downloads/test.freal.isolates.vcf.gz")
gen <- vcfR2genlight(vcf)
gen
dist <- bitwise.dist(gen)
dist
gen@gen
vcf
vcf@gt
vcf <- read.vcfR("Downloads/prubi_gbs.vcf.gz")
vcf
gen <- vcfR2genlight(vcf)
gen@gen
vcfdist <- bitwise.dist(gen)
ploidy(gen) <- 1
vcfdist <- bitwise.dist(gen)
dist
ploidy(gen) <- 2
vcfdist <- bitwise.dist(gen)
dist
vcf <- read.vcfR("Downloads/prubi_gbs.vcf.gz")
vcf
gen <- vcfR2genlight(vcf)
gen@gen
ploidy(gen) <- 1
vcfdist <- bitwise.dist(gen)
dist
vcf <- read.vcfR("Downloads/prubi_gbs.vcf.gz")
vcf
gen <- vcfR2genlight(vcf)
ploidy(gen) <- 1
gen
vcfdist <- bitwise.dist(gen)
vcfdist
rubi.pca <- glPca(gen, nf = 3)
rubi.pca <- glPca(gen, nf = 3)
rubi.pca.scores <- as.data.frame(rubi.pca$scores)
library(ggplot2)
set.seed(9)
p <- ggplot(rubi.pca.scores, aes(x=PC1, y=PC2, colour=pop))
p <- p + geom_point(size=2)
p
p <- ggplot(rubi.pca.scores, aes(x=PC1, y=PC2))
p <- p + geom_point(size=2)
p
reticulate::repl_python()
import numpy as np
python
reticulate::repl_python()
import numpy as np
import numpy as np
reticulate::repl_python()
reticulate::repl_python()
setwd("~/nanoplot-program")
reticulate::repl_python()
